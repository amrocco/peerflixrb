#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), *%w( .. lib ))

require 'optparse'
require 'peerflixrb'
require 'peerflixrb/commands'

options = {
  language: 'en',
  video_player: 'vlc'
}

optparse = OptionParser.new do |opts|
  opts.banner = 'Usage: peerflixrb [options] <search>'

  opts.on('-s', '--find-subtitles', 'Find subtitles on Addic7ed') do
    options[:find_subtitles] = true
  end

  opts.on('-n', '--no-player', "Don't autoplay") do
    options[:video_player] = nil
  end

  opts.on('-y', '--auto-select', 'Select first match') do
    options[:auto_select] = true
  end

  opts.on('-m', '--mplayer', 'Autoplay in mplayer*') do
    options[:video_player] = 'mplayer'
  end

  opts.on('-t SUBTITLE_FILE', '--subtitles SUBTITLE_FILE', 'Use local subtitles') do |t|
    options[:subtitles] = t
  end

  opts.on('-l LANGUAGE', '--language LANGUAGE', 'Language code to look subtitles for (default: English)') do |l|
    options[:language] = l
  end

  opts.on('-v', '--version', 'Print version and exit') do
    puts "Peerflixrb v#{Peerflixrb::VERSION}"
    exit
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    puts '* Autoplay can take several seconds to start since it needs to wait for the first piece'
    exit
  end
end

optparse.parse!

# Join arguments to create the search term
options[:search] = ARGV.join(' ')

# Show usage if no search
if options[:search].empty?
  puts optparse
  puts '* Autoplay can take several seconds to start since it needs to wait for the first piece'
  exit
end

# main program
begin
  system 'clear'
  cli = Peerflixrb::Commands::cli

  # KAT Search
  cli.say "Searching KAT for #{options[:search].blue}".yellow
  kat_search = Peerflixrb::KAT.new(options[:search])

  # Did it find results?
  if not kat_search.results_found
    cli.say "No results found for #{options[:search].blue}".red
    exit
  end

  # Choose link and subtitles
  link, sub_file = Peerflixrb::Commands.choose_video_and_subtitles(options, kat_search)

  # Peerflix command build
  command = "peerflix '#{link.magnet}'"
  command << " --subtitles '#{sub_file}'" if sub_file
  command << " --#{options[:video_player]}" if options[:video_player]
  command << ' -- --fullscreen'

  # Execute peerflix
  cli.say "Executing peerflix with #{link.filename.blue} ".yellow
  cli.say "and #{sub_file.blue}".yellow if sub_file
  system command
rescue Interrupt, EOFError
  cli.say 'Interrupted!'.red
ensure
  # Cleaning up
  if link
    cache_dir = "/tmp/torrent-stream/#{link.info_hash}"
    video_file = Dir["#{cache_dir}/**/*.{mkv,mp4,avi,wmv,mpg,flv,mov}"].first
    FileUtils.mv(sub_file, File.dirname(video_file)) if sub_file
    cli.say "Your downloads will be in #{cache_dir.blue} #{'for 3 days :)'.yellow}".yellow
  end
end
