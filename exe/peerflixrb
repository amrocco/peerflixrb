#!/usr/bin/env ruby

require 'highline/import'
require 'optparse'
require 'peerflixrb'
require 'popcorntime_search'

options = {
  language: 'en',
  video_player: 'mpv'
}

optparse = OptionParser.new do |opts|
  opts.banner = 'Usage: peerflixrb [options] <search>'

  opts.on('-y', '--auto-select', 'Select first match') do
    options[:auto_select] = true
  end

  opts.on('-n', '--no-player', "Don't autoplay (just download)") do
    options[:video_player] = nil
  end

  opts.on('-m', '--mplayer', 'Autoplay in mplayer*') do
    options[:video_player] = 'mplayer'
  end

  opts.on('-k', '--mpv', 'Autoplay in mpv* (Default)') do
    options[:video_player] = 'mpv'
  end

  opts.on('-o', '--omx', 'Autoplay in omx*') do
    options[:video_player] = 'omx'
  end

  opts.on('-u', '--dlna', 'Autoplay with DLNA') do
    options[:video_player] = 'dlna'
  end

  opts.on('-V', '--vlc', 'Autoplay in vlc*') do
    options[:video_player] = 'vlc'
  end

  opts.on('-s', '--find-subtitles', 'Find subtitles') do
    options[:find_subtitles] = true
  end

  opts.on('-S', '--choose-subtitles', 'Choose subtitles (only Addic7ed)') do
    options[:find_subtitles] = true
    options[:choose_subtitles] = true
  end

  opts.on('-l LANGUAGE', '--language LANGUAGE', 'Language code to look subtitles for (default: English)') do |l|
    options[:find_subtitles] = true
    options[:language] = l
  end

  opts.on('-t SUBTITLE_FILE', '--subtitles SUBTITLE_FILE', 'Use local subtitles') do |t|
    options[:subtitles] = t
  end

  opts.on('-v', '--version', 'Print version and exit') do
    puts "Peerflixrb v#{Peerflixrb::VERSION}"
    exit
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    puts '* Autoplay can take several seconds to start since it needs to wait for the first piece'
    exit
  end
end

optparse.parse!

# Join arguments to create the search term
options[:search] = ARGV.join(' ')

# Show usage if no search
if options[:search].empty?
  puts optparse
  puts '* Autoplay can take several seconds to start since it needs to wait for the first piece'
  exit
end

# main program
begin
  commands = Peerflixrb::Commands.new

  # Check requirements
  webtorrent = commands.webtorrent

  # Search
  say "Searching torrent for #{options[:search].blue}".yellow
  search = PopcorntimeSearch::Search.new(options[:search])

  # Did it find results?
  unless search.results_found?
    say "No results found for #{options[:search].blue}".red
    exit
  end

  # If 'auto' or only one result, pick the first/only one
  if options[:auto] || search.results.one?
    search_result = search.results.first
  else
    # If there are several matches, choose the appropriate one
    say "Search results for #{options[:search].blue}:".yellow
    search_result = choose(*search.results) do |menu|
      menu.default = '1'
      menu.select_by = :index
    end
  end

  if search_result.links.empty?
    say 'No results found'.red
    exit
  end

  # Choose link and subtitles
  options[:kind] = search_result.kind
  link, sub_file = commands.choose_video_and_subtitles(search_result, options)

  # Webtorrent command build
  command = "#{webtorrent} '#{link.magnet}'"
  command << " --subtitles \"#{sub_file}\"" if sub_file
  command << " --#{options[:video_player]}" if options[:video_player]

  # Execute webtorrent
  say "Executing webtorrent with #{link.title.blue} ".yellow
  say "and #{sub_file.blue}".yellow if sub_file
  system command
rescue Interrupt, EOFError
  say 'Interrupted!'.red
rescue SocketError
  say "Couldn't perform action. Are you online?".red
ensure
  # Cleaning up
  if link
    cache_dir = if options[:video_player]
                  "/tmp/webtorrent/#{link.info_hash}"
                else
                  # Current directory if download only
                  Dir.pwd
                end

    video_file = Dir["#{cache_dir}/**/*.{mkv,mp4,avi,wmv,mpg,flv,mov}"].first
    FileUtils.mv(sub_file, File.dirname(video_file)) if sub_file && video_file
    say "Your downloads will be in #{cache_dir.blue} #{'for 3 days :)'.yellow}".yellow
  end
end
